name: synth-easy

on:
  push:
    branches: [ main ]

      
  pull_request:
    branches: [ main ]

env:
  APPLICATION_NAME: synth-easy
  DEPLOYMENT_BUCKET_NAME: synth-easy-deployment-bucket
  DOMAIN_NAME: synth-easy.inflow-it-labs.tk
  TEXT_EXTRACTOR_COMPONENT_NAME: text-extractor
  AUDIO_GENERATOR_COMPONENT_NAME: audio-generator
  NOTIFY_SUCCESS_COMPONENT_NAME: notify-success
  HANDLE_ERROR_COMPONENT_NAME: handle-error
  START_TASK_COMPONENT_NAME: start-task
  CONTENT_REPO_BUCKET_NAME: synth-easy-content-repo
  FRONT_END_BUCKET_NAME: synth-easy

jobs:

  build-frontend:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: src/frontend/synth-easy-front
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Node
      uses: actions/setup-node@v3.1.1
      with:
        node-version: 14

    - name: Restore dependencies
      run: npm install

    - name: Build
      run: npm run build

    - name: Upload frontend build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.APPLICATION_NAME }}-frontend
        path: src/frontend/synth-easy-front/build
    
  build-lambdas: 
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: src/backend

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Node
      uses: actions/setup-node@v3.1.1
      with:
        node-version: 14

    - name: Restore dependencies
      run: npm install

    - name: Build
      run: npm run bundle

    - name: Zip text-extractor artifact
      run: |
        cd dist/${{ env.TEXT_EXTRACTOR_COMPONENT_NAME }}
        zip -r ${{ env.TEXT_EXTRACTOR_COMPONENT_NAME }}-${{ github.sha }}.zip  .

    - name: Zip audio-generator artifact
      run: |
        cd dist/${{ env.AUDIO_GENERATOR_COMPONENT_NAME }}
        zip -r ${{ env.AUDIO_GENERATOR_COMPONENT_NAME }}-${{ github.sha }}.zip  .

    - name: Zip start-task artifact
      run: |
        cd dist/${{ env.START_TASK_COMPONENT_NAME }}
        zip -r ${{ env.START_TASK_COMPONENT_NAME }}-${{ github.sha }}.zip  .

    - name: Zip notify-success artifact
      run: |
        cd dist/${{ env.NOTIFY_SUCCESS_COMPONENT_NAME }}
        zip -r ${{ env.NOTIFY_SUCCESS_COMPONENT_NAME }}-${{ github.sha }}.zip  .

    - name: Zip handle-error artifact
      run: |
        cd dist/${{ env.HANDLE_ERROR_COMPONENT_NAME }}
        zip -r ${{ env.HANDLE_ERROR_COMPONENT_NAME }}-${{ github.sha }}.zip  .
    
    - name: Upload text-extractor build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.TEXT_EXTRACTOR_COMPONENT_NAME }}
        path: src/backend/dist/${{ env.TEXT_EXTRACTOR_COMPONENT_NAME }}/${{ env.TEXT_EXTRACTOR_COMPONENT_NAME }}-${{ github.sha }}.zip

    - name: Upload audio-generator build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.AUDIO_GENERATOR_COMPONENT_NAME }}
        path: src/backend/dist/${{ env.AUDIO_GENERATOR_COMPONENT_NAME }}/${{ env.AUDIO_GENERATOR_COMPONENT_NAME }}-${{ github.sha }}.zip

    - name: Upload start-task build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.START_TASK_COMPONENT_NAME }}
        path: src/backend/dist/${{ env.START_TASK_COMPONENT_NAME }}/${{ env.START_TASK_COMPONENT_NAME }}-${{ github.sha }}.zip

    - name: Upload notify success build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.NOTIFY_SUCCESS_COMPONENT_NAME }}
        path: src/backend/dist/${{ env.NOTIFY_SUCCESS_COMPONENT_NAME }}/${{ env.NOTIFY_SUCCESS_COMPONENT_NAME }}-${{ github.sha }}.zip

    - name: Upload handle error build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.HANDLE_ERROR_COMPONENT_NAME }}
        path: src/backend/dist/${{ env.HANDLE_ERROR_COMPONENT_NAME }}/${{ env.HANDLE_ERROR_COMPONENT_NAME }}-${{ github.sha }}.zip


  create-or-update-lambda-deployment-bucket:
      runs-on: ubuntu-latest
      
      steps:
      - uses: actions/checkout@v3
      
    
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Create or update deployment bucket
        run: |
          aws cloudformation deploy --template-file ./aws/cfn/deployment-bucket.yml --stack-name synth-easy-deployment-bucket --parameter-overrides DeploymentBucketName=${{ env.DEPLOYMENT_BUCKET_NAME}}

  upload-lambda-artifacts-to-s3:
    needs: [
      build-lambdas, 
      create-or-update-lambda-deployment-bucket
    ]
    
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v3
      with:
        name: ${{ env.TEXT_EXTRACTOR_COMPONENT_NAME }}
    
    - uses: actions/download-artifact@v3
      with:
        name: ${{ env.AUDIO_GENERATOR_COMPONENT_NAME }}

    - uses: actions/download-artifact@v3
      with:
        name: ${{ env.START_TASK_COMPONENT_NAME }}
   
    - uses: actions/download-artifact@v3
      with:
        name: ${{ env.NOTIFY_SUCCESS_COMPONENT_NAME }}

    - uses: actions/download-artifact@v3
      with:
        name: ${{ env.HANDLE_ERROR_COMPONENT_NAME }}
   
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Upload to S3
      run: |
        aws s3 cp ${{ env.TEXT_EXTRACTOR_COMPONENT_NAME }}-${{ github.sha }}.zip s3://${{ env.DEPLOYMENT_BUCKET_NAME }}
        aws s3 cp ${{ env.AUDIO_GENERATOR_COMPONENT_NAME }}-${{ github.sha }}.zip s3://${{ env.DEPLOYMENT_BUCKET_NAME }}
        aws s3 cp ${{ env.START_TASK_COMPONENT_NAME }}-${{ github.sha }}.zip s3://${{ env.DEPLOYMENT_BUCKET_NAME }}
        aws s3 cp ${{ env.NOTIFY_SUCCESS_COMPONENT_NAME }}-${{ github.sha }}.zip s3://${{ env.DEPLOYMENT_BUCKET_NAME }}
        aws s3 cp ${{ env.HANDLE_ERROR_COMPONENT_NAME }}-${{ github.sha }}.zip s3://${{ env.DEPLOYMENT_BUCKET_NAME }}

  deploy:
    needs: [upload-lambda-artifacts-to-s3, build-frontend]
    
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3 
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Package and Deploy Infrastructure
      run: |
        aws cloudformation package --template-file ./aws/cfn/synth-easy-stack.yml --output-template-file synth-easy-stack.packaged.yml --s3-bucket ${{ env.DEPLOYMENT_BUCKET_NAME}}
        aws cloudformation deploy --template-file synth-easy-stack.packaged.yml --stack-name synth-easy --parameter-overrides \
            Application=${{ env.APPLICATION_NAME }} \
            Environment=dev \
            DeploymentBucketName=${{ env.DEPLOYMENT_BUCKET_NAME }} \
            TextExtractorLambdaZipFile=${{ env.TEXT_EXTRACTOR_COMPONENT_NAME }}-${{ github.sha }}.zip \
            AudioGeneratorLambdaZipFile=${{ env.AUDIO_GENERATOR_COMPONENT_NAME }}-${{ github.sha }}.zip \
            StartTaskLambdaZipFile=${{ env.START_TASK_COMPONENT_NAME }}-${{ github.sha }}.zip \
            NotifySuccessLambdaZipFile=${{ env.NOTIFY_SUCCESS_COMPONENT_NAME }}-${{ github.sha }}.zip \
            HandleErrorLambdaZipFile=${{ env.HANDLE_ERROR_COMPONENT_NAME }}-${{ github.sha }}.zip \
            ContentRepoBucketName=${{ env.CONTENT_REPO_BUCKET_NAME }} \
            FrontendBucketName=${{ env.FRONT_END_BUCKET_NAME }} \
            --capabilities CAPABILITY_IAM
        if [[$? -ne 0]];
        then
          aws cloudformation describe-stack-events --stack-name synth-easy
        fi

    - uses: actions/download-artifact@v3
      with:
        name: ${{ env.APPLICATION_NAME }}-frontend
        path: ${{ env.APPLICATION_NAME }}-frontend

    - name: Deploy frontend
      run: |
        aws s3 cp --recursive ./${{ env.APPLICATION_NAME }}-frontend/ s3://${{ env.FRONT_END_BUCKET_NAME }}

        